<svelte:head>
  <title>Example — Add/Remove</title>
  <meta name="description" content="Svelte-grid — Example — Add/Remove" />
  <meta name="keywords" content="draggable,resizable,grid,layout,responsive,breakpoints,Svelte,svelte,svelte.js,sveltejs,usage,example,examples,samples,add,remove,dynamic" />
  <meta name="author" content="Vahe Araqelyan" />
</svelte:head>

<style>
.remove { cursor: pointer; position: absolute; right: 5px; top: 3px; }
</style>

## Add/Remove
<small><a target=_blank href="https://svelte.dev/repl/6f3685b564d74eb0812cfe10e41f3186?version=latest">REPL</a></small>
<small><a target=_blank  href={`${openSource}/add_remove.svx`}>SOURCE</a></small>


This demo shows what happens when items are dynamically added and removed.
You can remove an item by clicking its "x", and add a new one with the button.
After adding an element, you can use the `normalize` or `adjust` functions.
But this will actually be used to prevent a situation where your box will overlap with another.

---

<button on:click={add}>Add (random size)</button>
<button on:click={addAt}>Add random (x=0,y=0)</button>
<label>
  <input type="checkbox" bind:checked={adjustAfterRemove} />
  Adjust elements after removing an item
</label>

<div class=demo-container>
  <Grid bind:items={items} rowHeight={100} let:item let:dataItem {cols}>
    <div class=demo-widget>
      <span on:pointerup={e=>e.stopPropagation()} on:click={() => remove(item)} on:pointerdown={e=>e.preventDefault()} class=remove>✕</span>
      <p>{dataItem.id}</p>
    </div>
  </Grid>
</div>

<script>
import Grid from "../../components/svelte-grid/index.svelte";
import gridHelp from "../../components/svelte-grid/utils/helper.js";
import { openSource } from "./github.js";

const COLS = 6;

const id = () => "_" + Math.random().toString(36).substr(2, 9);

const randomNumberInRange = (min, max) => Math.random() * (max - min) + min;

let items = [
  {
    [COLS]: gridHelp.item({
      x: 0,
      y: 0,
      w: 2,
      h: 2,
    }),
    id: id(),
  },

  {
    [COLS]: gridHelp.item({
      x: 2,
      y: 0,
      w: 2,
      h: 2,
    }),
    id: id(),
  },
];

const cols = [[1100, 6]];

function add() {
  let newItem = {
    6: gridHelp.item({
      w: Math.round(randomNumberInRange(1, 4)),
      h: Math.round(randomNumberInRange(1, 4)),
      x: 0,
      y: 0,
    }),
    id: id(),
  };

  let findOutPosition = gridHelp.findSpace(newItem, items, COLS);

  let newItem = {
    ...item,
    ...cols.reduce(
      (acc, obj) => {
        let col = obj[1]; // for each col config, get number of cols
        let findOutPosition = gridHelp.findSpace(item, $items, col);
        if (!acc[col]) {
          acc[col] = {
            ...item[col],
            ...findOutPosition,
          };
        }
        return acc
      }, {})
  }

  items = [...items, ...[newItem]];
}

const addAt = () => {
  let newItem = {
    6: gridHelp.item({
      w: Math.round(randomNumberInRange(1, 4)),
      h: Math.round(randomNumberInRange(1, 4)),
      x: 0,
      y: 0,
    }),
    id: id(),
  };

  items = [...[newItem], ...items];

  items = gridHelp.normalize(items, COLS);
};

const remove = (item) => {
  items = items.filter((value) => value.id !== item.id);

  if (adjustAfterRemove) {
    items = gridHelp.adjust(items, COLS);
  }
};

let adjustAfterRemove = false;
</script>
